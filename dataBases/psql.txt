Introduction to Database and SQL [
    Confluence: Link to course; {
        https://codeyouth.atlassian.net/wiki/spaces/CODEYOUTH/pages/904200199/Introduction+to+Databases
        # Link Above: Takes me to the course page. Links below describe the concepts with more depth
    },
    Programiz: Database Introduction; {
        https://www.programiz.com/sql/database-introduction
        # A database is an organized collection of data. We use a DBMS or Database Management Systems 
        There are two different DBMS': [
            - Non-Relational (Non-RDBMS)
                Are stored in key-value pairs 'objects'.
                These are databases such as MongoDB, Amazon DynamoDB, Redis
            - Relational (RSBMS)
                Stored in a table format. These tables store different datasets and are connected by related data
                Common RDBMS: MySQL, PostgreSQL, MSSQL, Oracle
        ]
    },
    Elephantsql: fudemental structure and key terms; {
        elephantsql.com/blog/databases-for-beginners-what-is-a-database-what-is-postgresql.html 
        # How to link attributes, heiracle relationships between datasets
        Concepts [
            Rows == (Record &| Tuple) = information about a specific entity
            Entity == the identity of the data representing the fields
            Columns == fields (information about the entity i.e. birthday, address...)
            Data Value == the values in each cell of he fields
        ],
        Design: [
            # Just like when we create a website there should be a structure to the database. 
            - Data should not be saved on diffent tables (except when it comes to forein keys)
            - Depending on the structure of your app keep in mind:
                - What kind of information you want to store?
                - Can the information be sepatated into distinct categories, so that each entity holds only one type?
            More on Design under Data Models
        ],    
        Cardinality: [
            # The relationship between entities: Shows how one side of each relationship (RSBMS) belongs to the other 
            - the relationships between datasets include: one to many, and many to one
            - There can never be a "many to many" relationship between datasets so we must break it into two one to many datasets
                e.g. There are two data sets: 'Players' && 'Games'. This creates conflict as any player could play multiple Games
                Therefore we need to add in another dataset that breaks the relationship into one to many and many to one. Hense we add the 'Teams' data set so each player is on one team that plays multiple games
            The Relationship between DataSets are accessed through 'KEYS' as described below
        ]
    },
    JavaPoint: Data Models 'flowcharts', and keys; {
        https://www.javatpoint.com/dbms-er-model-concept
        # ER model stands for an Entity-Relationship model (a high level data model). This is displayed as a diagram to conceptualize the database and develops an easy design to view it. 

        Components: This is the style guide to an ER model(

            const Entity === object, class, person, place;
                style{
                    border: 1px solid black;
                }

                if (entity<=parent entity){
                    entity == weak;
                    style{
                        border: 1px solid black;
                    }
                }
            
            
            const Attribute === description of an entity [id, phone_number, age, name];
                style{
                    border: 1px solid black;
                    border-radius: 50%;
                }        

                if(attribute == main characteristics of entity 'Primary Key'){
                    const primaryKey === attribute;
                    style{
                        border: 1px solid black;
                        border-radius: 50%;
                        text-decoration: underline;
                    }
                }else if(attribute = multiple attributes 'Composite Attribute'){
                    compositeAtt.forEach(style => 'border: 1px solid black' 'border-radius: 50%')  
                }else if(attribute = multible values 'Multivalued Attribute){
                    style{
                        border: 1px double black;
                        border-radius: 50%;
                    }
                }else if(attribute can be derived from another attribute 'Derived Attribute'){
                    style{
                        border: 1px dashed black;
                        border-radius: 50%;
                    }
                }

            const Relation === relation between entities;
                relationship.style.border="rhombus"
                if(rel = one instance of an entity is associated with the relationship){
                    rel = one-to-one;
                    i.e 1 female - married - 1 male
                }else if(rel = one instance of the entity on the left & >1 instance on the right){
                    rel = one to many;
                    i.e 1 scientist - invented - many inventions
                }else if(rel = rel>1 instance of the entity on the left & rel = 1 instance of the entity on the right){
                    rel = many to one;
                    i.e many students - enroll - one course
                }ele if (rel = rel>1 instance on the left && rel>1 instance on the right){
                    rel = many to many;
                    i.e many employees are assigned many projects;
                }
        )
    },
    Learn Computer Science: Database Keys; {
        https://www.learncomputerscienceonline.com/database-keys/
        # an attribute or a group of attributes that uniquely identify each tuple in a table
    
        Rules of the keys: [
            # Relevant Persons: E F Codd (A British Computer Scientist, while working for IBM invented the relational databse management system);
            
            Primary Keys: attribute that uniquely identifies a record in a table
            Forein Key: Primary key of another table which is used to link the two tables
        ]
        Commands:
        1. creating database
        postgres# 
        https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-data-types/


        create table
        create table users(id serial primary key, firstname varchar(50), lastname varchar(50));
        https://www.postgresql.org/docs/current/datatype-datetime.html

        DIFFERENCE IN KEYS
        https://www.geeksforgeeks.org/difference-between-primary-key-and-unique-key/

        CHANGE PASWORD
        https://www.enterprisedb.com/downloads/postgres-postgresql-downloads

        

},

CREATE TABLE customers ( customer_id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), age INT, country VARCHAR(100));

INSERT INTO customers(first_name, last_name, age, country) VALUES('John', 'Doe', 31, 'USA');
INSERT INTO customers(first_name, last_name, age, country) VALUES('Robert', 'Luna', 22, 'USA');
INSERT INTO customers(first_name, last_name, age, country) VALUES('David', 'Robinson', 22, 'Uk');
INSERT INTO customers(first_name, last_name, age, country) VALUES('John', 'Reinhardt', 25, 'UK');
INSERT INTO customers(first_name, last_name, age, country) VALUES('Betty', 'Doe', 28, 'UAE);

6. to check tables in database
\dt

7. schema of a table
\d tablename;

8. insert data into table


9. view data in a table
SELECT * FROM users;

10. creating table with foreign key
CREATE TABLE products(id SERIAL PRIMARY KEY, item VARCHAR(40),amount INT, user_id INT REFERENCES users(id) ON DELETE CASCADE);




inner and outer join 
https://phoenixnap.com/kb/mysql-join 



Practice

# - return names of all thos customers whose shipping status is pending
    SELECT first_name, last_name
    FROM customers
    JOIN shippings
    ON customers.customer_id = shipping.customer_id
    WHERE status = 'Pending'; 

# - return names of customers who spend more than 300 on items
    SELECT first_name, last_name
    FROM customers
    JOIN orders
    ON customers.customer_id=orders.customer_id
    WHERE amount > 300;

# - return names of customers who ordered keyboards and shipping status is pending
    SELECT first_name, last_name
    FROM customers
    INNER JOIN orders ON customers.customer_id = orders.customer_id
    INNER JOIN shippings ON  orders.customer_id = shippings.customer_id
    WHERE item = 'Keyboard' AND status = 'Pending'; 

    IP4 address


    projects


    https://raw.githubusercontent.com/lighthouse-labs/w5-sql-seeds/master/bootcampx_seeds/students_seeds.sql
    https://raw.githubusercontent.com/lighthouse-labs/w5-sql-seeds/master/bootcampx_seeds/cohorts_seeds.sql
    https://cdn.discordapp.com/attachments/1045366403475177495/1060950886383366265/image.png